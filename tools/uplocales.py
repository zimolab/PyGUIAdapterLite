#!/usr/bin/env python3

"""
这个脚本用于更新本地化资源文件。它会遍历pyguiadapterlite/locales目录下所有的po文件，
并使用msgfmt命令编译它们，生成对应的mo文件，并放置在对应locale的LC_MESSAGES目录下。
比如：在pyguiadapterlite/locales目录下有zh_CN.po文件，运行这个脚本后，会生成zh_CN/LC_MESSAGES/pyguiadapterlite.mo文件。
之所以编译后的文件叫做pyguiadapterlite.mo，是因为默认的domain为pyguiadapterlite。

注意：这个脚本仅应当在开发pyguiadapterlite时使用调用，并非提供给库的用户使用。
请确保在运行这个脚本前，已经安装了gettext工具包，并正确配置了环境变量，可以在命令行中运行msgfmt命令。
"""

import subprocess
from pathlib import Path

CLEAN_MO_FILES = True

BASE_DIR = Path(__file__).parent.parent
LOCALES_DIR = BASE_DIR / "pyguiadapterlite/locales"
DOMAIN = "pyguiadapterlite"

MSGFMT_ARGS = []


def main():
    # 打印msgfmt命令的版本信息
    subprocess.run(["msgfmt", "--version"], check=True)
    print("#" * 80)
    success = 0
    failed = 0
    if CLEAN_MO_FILES:
        print("cleaning up mo files auto-generated by poedit...")
        for mo_file in LOCALES_DIR.glob("*.mo"):
            print(f"found auto-generated mo file: {mo_file.relative_to(LOCALES_DIR)}")
            print("deleting...")
            mo_file.unlink()
            print("deleted.")
        print("#" * 80)
    for locale_file in LOCALES_DIR.glob("*.po"):
        locale_name = locale_file.stem
        print(f"updating locale: {locale_name}...")
        # 获取目标.mo文件路径
        target_mo_dir = LOCALES_DIR / locale_name / "LC_MESSAGES"
        if not target_mo_dir.is_dir():
            print(f"creating {target_mo_dir}...")
            target_mo_dir.mkdir(parents=True, exist_ok=True)
        target_mo_file = target_mo_dir / f"{DOMAIN}.mo"
        print(
            f"compiling {locale_file.relative_to(LOCALES_DIR)} into {target_mo_file.relative_to(LOCALES_DIR)}..."
        )
        # 使用msgfmt命令编译po文件
        cmd = [
            "msgfmt",
            "-o",
            target_mo_file.as_posix(),
            locale_file.as_posix(),
            *MSGFMT_ARGS,
        ]
        try:
            subprocess.run(cmd, check=True)
            print(f"{locale_name} updated successfully.")
            success += 1
        except BaseException as e:
            print("exception occurred:", e)
            failed += 1
        print("#" * 80)
        print(
            f"# summary: total: {success+failed}, success: {success}, failed: {failed}"
        )


if __name__ == "__main__":
    main()
